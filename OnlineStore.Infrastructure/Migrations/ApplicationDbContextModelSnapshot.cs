// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineStore.Infrastructure.Data;

#nullable disable

namespace OnlineStore.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.DetailsInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("PayCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Postpaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.HasIndex("SupplierId");

                    b.ToTable("DetailsInvoices");

                    b.HasDiscriminator().HasValue("DetailsInvoice");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.InvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceLines");

                    b.HasDiscriminator().HasValue("InvoiceLine");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.InvoiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CashPayment")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("OnlinePayment")
                        .HasColumnType("bit");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("Tax")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("VendorId");

                    b.ToTable("InvoiceOrders");

                    b.HasDiscriminator().HasValue("InvoiceOrder");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.InvoiceOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InvoiceOrderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceOrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceOrderLines");

                    b.HasDiscriminator().HasValue("InvoiceOrderLine");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.InvoiceOrderOnlineLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceOrderOnlineLines");

                    b.HasDiscriminator().HasValue("InvoiceOrderOnlineLine");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.PurchaseBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<bool>("CashPayment")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool>("CreditPayment")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("DateInvoice")
                        .HasColumnType("date");

                    b.Property<string>("InvoiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.ToTable("purchaseBills");

                    b.HasDiscriminator().HasValue("PurchaseBill");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialSupplied")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasDiscriminator().HasValue("Supplier");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Shipping.DeliverCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddersId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateArrival")
                        .HasColumnType("date");

                    b.Property<string>("DeliverLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddersId")
                        .IsUnique()
                        .HasFilter("[AddersId] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("DeliverCarts");

                    b.HasDiscriminator().HasValue("DeliverCart");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Shipping.ShippingCompanies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyNO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("shippingCompanies");

                    b.HasDiscriminator().HasValue("ShippingCompanies");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Shipping.ShippingCompaniesPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("DeliverPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ShippingCompaniesPermissions");

                    b.HasDiscriminator().HasValue("ShippingCompaniesPermissions");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Shipping.StoreReliesOnShippingCompanies", b =>
                {
                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("StoreReliesOnShippingCompanies");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CategoryName");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("Categories");

                    b.HasDiscriminator().HasValue("Category");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.ContaintProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ContaintProducts");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.IncludeCategory", b =>
                {
                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateInclude")
                        .HasColumnType("date");

                    b.HasKey("StoreId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("IncludeCategories");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequstDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasDiscriminator().HasValue("Order");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProductName");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SaleId");

                    b.ToTable("Products");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasDiscriminator().HasValue("ProductImage");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndSale")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("StartSale")
                        .HasColumnType("date");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Sales");

                    b.HasDiscriminator().HasValue("Sale");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AdministratorId");

                    b.ToTable("Stores");

                    b.HasDiscriminator().HasValue("Store");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.StoreManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("VenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId")
                        .IsUnique()
                        .HasFilter("[StoreId] IS NOT NULL");

                    b.HasIndex("VenderId")
                        .IsUnique()
                        .HasFilter("[VenderId] IS NOT NULL");

                    b.ToTable("StoreManagers");

                    b.HasDiscriminator().HasValue("StoreManager");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.StoreManagerPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreManagerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreManagerId");

                    b.ToTable("StoreManagersPermissions");

                    b.HasDiscriminator().HasValue("StoreManagerPermissions");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNO1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNO2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.ToTable("Accounts");

                    b.HasDiscriminator().HasValue("Account");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAdderss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasDiscriminator().HasValue("Address");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SSN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Administrators");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.AdministratorPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPermission")
                        .HasColumnType("bit");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.ToTable("AdministratorsPermissions");

                    b.HasDiscriminator().HasValue("AdministratorPermission");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.HasIndex("StoreId");

                    b.ToTable("Vendors");

                    b.HasDiscriminator().HasValue("Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Core.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.DetailsInvoice", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.AppAccounting.PurchaseBill", "PurchaseBill")
                        .WithOne("DetailsInvoice")
                        .HasForeignKey("OnlineStore.Core.Entities.AppAccounting.DetailsInvoice", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Core.Entities.AppAccounting.Supplier", "Supplier")
                        .WithMany("DetailsInvoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PurchaseBill");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.InvoiceLine", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.AppAccounting.PurchaseBill", "PurchaseBill")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Product", "Product")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("PurchaseBill");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.InvoiceOrder", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Store", "Store")
                        .WithMany("InvoiceOrders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Core.Entities.Users.Vendor", "Vendor")
                        .WithMany("InvoiceOrders")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Store");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.InvoiceOrderLine", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.AppAccounting.InvoiceOrder", "InvoiceOrder")
                        .WithMany("InvoiceOrderLines")
                        .HasForeignKey("InvoiceOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Product", "Product")
                        .WithMany("InvoiceOrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.InvoiceOrderOnlineLine", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Order", "Order")
                        .WithMany("InvoiceOrderOnlineLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Product", "Product")
                        .WithMany("InvoiceOrderOnlineLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.PurchaseBill", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.Administrator", "Administrator")
                        .WithMany("PurchaseBills")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Shipping.DeliverCart", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.Address", "Address")
                        .WithOne("DeliverCart")
                        .HasForeignKey("OnlineStore.Core.Entities.Shipping.DeliverCart", "AddersId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Core.Entities.Shipping.ShippingCompanies", "Company")
                        .WithMany("DeliverCarts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Order", "Order")
                        .WithOne("DeliverCart")
                        .HasForeignKey("OnlineStore.Core.Entities.Shipping.DeliverCart", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Shipping.ShippingCompaniesPermissions", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Shipping.ShippingCompanies", "ShippingCompanies")
                        .WithMany("ShippingCompaniesPermissions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ShippingCompanies");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Shipping.StoreReliesOnShippingCompanies", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Shipping.ShippingCompanies", "ShippingCompanies")
                        .WithMany("StoreReliesOnShippingCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Store", "Store")
                        .WithMany("ShippingCompanies")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ShippingCompanies");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Category", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Sale", "Sale")
                        .WithMany("Categories")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.ContaintProduct", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Order", "Order")
                        .WithMany("ContaintProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Product", "Product")
                        .WithMany("ContaintProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.IncludeCategory", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Category", "Category")
                        .WithMany("IncludeCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Store", "Store")
                        .WithMany("IncludeCategories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Order", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Product", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Sale", "Sale")
                        .WithMany("Products")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.ProductImage", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Sale", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Store", "Store")
                        .WithMany("Sales")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Store");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Store", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.Address", "Address")
                        .WithMany("Stores")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Core.Entities.Users.Administrator", "Administrator")
                        .WithMany("Stores")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.StoreManager", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Store", "Store")
                        .WithOne("StoreManager")
                        .HasForeignKey("OnlineStore.Core.Entities.StoreEntity.StoreManager", "StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Core.Entities.Users.Vendor", "Vendor")
                        .WithOne("StoreManager")
                        .HasForeignKey("OnlineStore.Core.Entities.StoreEntity.StoreManager", "VenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Store");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.StoreManagerPermissions", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.StoreManager", "StoreManager")
                        .WithMany("Permissions")
                        .HasForeignKey("StoreManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("StoreManager");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Account", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.Address", "Address")
                        .WithOne("Account")
                        .HasForeignKey("OnlineStore.Core.Entities.Users.Account", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Administrator", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.Account", "Account")
                        .WithOne("Administrator")
                        .HasForeignKey("OnlineStore.Core.Entities.Users.Administrator", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.AdministratorPermission", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.Administrator", "Administrator")
                        .WithMany("Permissions")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Customer", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("OnlineStore.Core.Entities.Users.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Vendor", b =>
                {
                    b.HasOne("OnlineStore.Core.Entities.Users.Account", "Account")
                        .WithOne("Vendor")
                        .HasForeignKey("OnlineStore.Core.Entities.Users.Vendor", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Core.Entities.StoreEntity.Store", "Store")
                        .WithMany("Vendors")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.InvoiceOrder", b =>
                {
                    b.Navigation("InvoiceOrderLines");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.PurchaseBill", b =>
                {
                    b.Navigation("DetailsInvoice");

                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.AppAccounting.Supplier", b =>
                {
                    b.Navigation("DetailsInvoices");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Shipping.ShippingCompanies", b =>
                {
                    b.Navigation("DeliverCarts");

                    b.Navigation("ShippingCompaniesPermissions");

                    b.Navigation("StoreReliesOnShippingCompanies");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Category", b =>
                {
                    b.Navigation("IncludeCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Order", b =>
                {
                    b.Navigation("ContaintProducts");

                    b.Navigation("DeliverCart");

                    b.Navigation("InvoiceOrderOnlineLines");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Product", b =>
                {
                    b.Navigation("ContaintProducts");

                    b.Navigation("InvoiceLines");

                    b.Navigation("InvoiceOrderLines");

                    b.Navigation("InvoiceOrderOnlineLines");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Sale", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.Store", b =>
                {
                    b.Navigation("IncludeCategories");

                    b.Navigation("InvoiceOrders");

                    b.Navigation("Sales");

                    b.Navigation("ShippingCompanies");

                    b.Navigation("StoreManager");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.StoreEntity.StoreManager", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Account", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Customer");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Address", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("DeliverCart");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Administrator", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("PurchaseBills");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OnlineStore.Core.Entities.Users.Vendor", b =>
                {
                    b.Navigation("InvoiceOrders");

                    b.Navigation("StoreManager");
                });
#pragma warning restore 612, 618
        }
    }
}
